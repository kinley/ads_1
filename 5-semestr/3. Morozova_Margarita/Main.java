
/**
 Семестровое задание
  Выполнила Маргарита Морозова, 1 курс, группа 09-308, институт ВМиИТ, К(П)ФУ. Казань, 2014.
 * Задача: Проверка орфографии.
 * Требования к реализации: Создать класс Dictionary с операциями "добавить-удалить-содержится"
 * реализовать нагруженным деревом (trie).
 *
 * Для выполнения задания были созданы четыре класса:
 * - Инструменты: Dictionary, TrieP.
 * - Входные данные: In.
 * - Основная программа Main.
 * 
 * Программа читает текст и словарь из заданных текстовых файлов, вывод осуществляется в командную строку.
 *
 * Список использованных источников:
 * 1. Ахо А. Структуры данных и алгоритмы /Ахо А., Хопкрофт Дж., Ульман Дж. – М.;СПб.;Киев, 2000. - 384с.
 * 2. Бакнелл Дж. Фундаментальные алгоритмы и структуры данных в Delphi. – М.;СПб.;Киев, 2003. - 560 с.
 * 3. Седжвик Р. Алгоритмы на Java /Седжвик Р., Уэйн К. - 4-е изд. - М.;СПб.;Киев, 2013. - 848с.
 */
 
//Основная программа. Включает в себя чтение с файлов, проверку орфографии и вывод слов с ошибками.

public class Main {
	public static void main(String[] args) 
	{
		// Блок ввода. Чтение текста и словаря с файлов.
		In inText = new In("test-1.txt");// test-2.txt
		In inDict = new In("dict-1.txt");// dict-2.txt
		// Создание соответствующих им множеств.
		Dictionary text = new Dictionary();
		Dictionary dict = new Dictionary();
		// И их заполнение.
		while (!inText.isEmpty())
		{
			String s = inText.readLine(); 
			text.add(s);
		}
		while (!inDict.isEmpty())
		{
			dict.add(inDict.readLine());
		}
		
		// Основная часть программы.
		String word = "";
		if (!text.isEmpty()) {word = text.getFirstWord();}
		// Берем слова из текста, проверяем их наличие в словаре. Если слово есть, 
		//	удаляем его из текста. В результате в тексте остаются только слова с ошибками.
		while (!text.isChecked()) 
		{
			if (dict.inDictionary(word))
			{
				text.remove(word);
			}
			word = text.getNextWord(word);
		}
		
		// Печатаем оставшуюся часть текста.
		text.print();
	}
}

